---
# tasks file for kubernetes
#

- name: Determine mode
  set_fact:
    kubernetes_mode: "{{ ansible_local.aws.kubernetes.mode }}"
  when: ansible_local.aws.kubernetes.mode is defined


- name: Install packages that allow apt to be used over HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common


- name: Add an apt signing key for Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present


- name: Add apt repository for stable version
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present


- name: Install docker and its dependencies
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - docker-ce 
    - docker-ce-cli 
    - containerd.io


- name: Start docker
  systemd:
    name: docker
    state: started
    enabled: yes
    daemon_reload: yes


- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none


- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  tags: ['molecule-notest']


- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present


- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list


- name: Install Kubernetes binaries
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet 
      - kubeadm 
      - kubectl


- name: Start kubelet
  service:
    name: kubelet
    state: started
    enabled: yes


- name: Configure controller
  block:
    - name: Check if Kubernetes has already been initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubernetes_init_stat
    
    
    - name: Initialize Kubernetes primary controller
      command: >
        kubeadm init
        --apiserver-cert-extra-sans={{ ansible_host }}
        --pod-network-cidr=10.244.0.0/16
        --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        --ignore-preflight-errors=all
        --token abcdef.1234567890abcdef
      when:
        - not kubernetes_init_stat.stat.exists


    - name: Fetch kubeconfig
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: kubeconfig.yaml
        flat: yes


    - name: Replace
      lineinfile:
        name: kubeconfig.yaml
        regexp: "server:"
        line: "    server: https://{{ ansible_host }}:6443"
      connection: local
      become: no
      tags: ['molecule-notest']
    
  when: kubernetes_mode == 'controller'


- name: Configure worker
  block:
    - name: Determine controller_ip
      set_fact:
        controller_ip: "{{ ansible_local.aws.kubernetes.controller_ip }}"
      when: ansible_local.aws.kubernetes.controller_ip is defined


    - name: Join node to Kubernetes controller
      shell: >
        kubeadm join --token abcdef.1234567890abcdef --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification {{ controller_ip }}:6443
        creates=/etc/kubernetes/kubelet.conf
      tags: ['molecule-nolint']
  when: kubernetes_mode == 'worker'
